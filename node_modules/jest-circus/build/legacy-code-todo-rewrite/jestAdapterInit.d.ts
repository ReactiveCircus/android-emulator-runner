/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/// <reference types="node" />
import type { Circus, Config, Global } from '@jest/types';
import type { JestEnvironment } from '@jest/environment';
import { TestResult } from '@jest/test-result';
export declare const initialize: ({ config, environment, getPrettier, getBabelTraverse, globalConfig, localRequire, parentProcess, testPath, }: {
    config: Config.ProjectConfig;
    environment: JestEnvironment;
    getPrettier: () => any;
    getBabelTraverse: () => Function;
    globalConfig: Config.GlobalConfig;
    localRequire: (path: string) => any;
    testPath: string;
    parentProcess: NodeJS.Process;
}) => {
    globals: {
        afterAll: (fn: Circus.HookFn, timeout?: number | undefined) => void;
        afterEach: (fn: Circus.HookFn, timeout?: number | undefined) => void;
        beforeAll: (fn: Circus.HookFn, timeout?: number | undefined) => void;
        beforeEach: (fn: Circus.HookFn, timeout?: number | undefined) => void;
        describe: {
            (blockName: string, blockFn: Global.BlockFn): void;
            each: (table: Global.EachTable, ...taggedTemplateData: Global.TemplateData) => (title: string, test: Global.EachTestFn, timeout?: number | undefined) => void;
            only: {
                (blockName: string, blockFn: Global.BlockFn): void;
                each: (table: Global.EachTable, ...taggedTemplateData: Global.TemplateData) => (title: string, test: Global.EachTestFn, timeout?: number | undefined) => void;
            };
            skip: {
                (blockName: string, blockFn: Global.BlockFn): void;
                each: (table: Global.EachTable, ...taggedTemplateData: Global.TemplateData) => (title: string, test: Global.EachTestFn, timeout?: number | undefined) => void;
            };
        };
        it: Global.It;
        test: Global.It;
    };
    snapshotState: import("jest-snapshot/build/State").default;
};
export declare const runAndTransformResultsToJestFormat: ({ config, globalConfig, testPath, }: {
    config: Config.ProjectConfig;
    globalConfig: Config.GlobalConfig;
    testPath: string;
}) => Promise<TestResult>;
//# sourceMappingURL=jestAdapterInit.d.ts.map